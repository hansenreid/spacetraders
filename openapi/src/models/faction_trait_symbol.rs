/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

/// FactionTraitSymbol : The unique identifier of the trait.

/// The unique identifier of the trait.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FactionTraitSymbol {
    #[serde(rename = "BUREAUCRATIC")]
    Bureaucratic,
    #[serde(rename = "SECRETIVE")]
    Secretive,
    #[serde(rename = "CAPITALISTIC")]
    Capitalistic,
    #[serde(rename = "INDUSTRIOUS")]
    Industrious,
    #[serde(rename = "PEACEFUL")]
    Peaceful,
    #[serde(rename = "DISTRUSTFUL")]
    Distrustful,
    #[serde(rename = "WELCOMING")]
    Welcoming,
    #[serde(rename = "SMUGGLERS")]
    Smugglers,
    #[serde(rename = "SCAVENGERS")]
    Scavengers,
    #[serde(rename = "REBELLIOUS")]
    Rebellious,
    #[serde(rename = "EXILES")]
    Exiles,
    #[serde(rename = "PIRATES")]
    Pirates,
    #[serde(rename = "RAIDERS")]
    Raiders,
    #[serde(rename = "CLAN")]
    Clan,
    #[serde(rename = "GUILD")]
    Guild,
    #[serde(rename = "DOMINION")]
    Dominion,
    #[serde(rename = "FRINGE")]
    Fringe,
    #[serde(rename = "FORSAKEN")]
    Forsaken,
    #[serde(rename = "ISOLATED")]
    Isolated,
    #[serde(rename = "LOCALIZED")]
    Localized,
    #[serde(rename = "ESTABLISHED")]
    Established,
    #[serde(rename = "NOTABLE")]
    Notable,
    #[serde(rename = "DOMINANT")]
    Dominant,
    #[serde(rename = "INESCAPABLE")]
    Inescapable,
    #[serde(rename = "INNOVATIVE")]
    Innovative,
    #[serde(rename = "BOLD")]
    Bold,
    #[serde(rename = "VISIONARY")]
    Visionary,
    #[serde(rename = "CURIOUS")]
    Curious,
    #[serde(rename = "DARING")]
    Daring,
    #[serde(rename = "EXPLORATORY")]
    Exploratory,
    #[serde(rename = "RESOURCEFUL")]
    Resourceful,
    #[serde(rename = "FLEXIBLE")]
    Flexible,
    #[serde(rename = "COOPERATIVE")]
    Cooperative,
    #[serde(rename = "UNITED")]
    United,
    #[serde(rename = "STRATEGIC")]
    Strategic,
    #[serde(rename = "INTELLIGENT")]
    Intelligent,
    #[serde(rename = "RESEARCH_FOCUSED")]
    ResearchFocused,
    #[serde(rename = "COLLABORATIVE")]
    Collaborative,
    #[serde(rename = "PROGRESSIVE")]
    Progressive,
    #[serde(rename = "MILITARISTIC")]
    Militaristic,
    #[serde(rename = "TECHNOLOGICALLY_ADVANCED")]
    TechnologicallyAdvanced,
    #[serde(rename = "AGGRESSIVE")]
    Aggressive,
    #[serde(rename = "IMPERIALISTIC")]
    Imperialistic,
    #[serde(rename = "TREASURE_HUNTERS")]
    TreasureHunters,
    #[serde(rename = "DEXTEROUS")]
    Dexterous,
    #[serde(rename = "UNPREDICTABLE")]
    Unpredictable,
    #[serde(rename = "BRUTAL")]
    Brutal,
    #[serde(rename = "FLEETING")]
    Fleeting,
    #[serde(rename = "ADAPTABLE")]
    Adaptable,
    #[serde(rename = "SELF_SUFFICIENT")]
    SelfSufficient,
    #[serde(rename = "DEFENSIVE")]
    Defensive,
    #[serde(rename = "PROUD")]
    Proud,
    #[serde(rename = "DIVERSE")]
    Diverse,
    #[serde(rename = "INDEPENDENT")]
    Independent,
    #[serde(rename = "SELF_INTERESTED")]
    SelfInterested,
    #[serde(rename = "FRAGMENTED")]
    Fragmented,
    #[serde(rename = "COMMERCIAL")]
    Commercial,
    #[serde(rename = "FREE_MARKETS")]
    FreeMarkets,
    #[serde(rename = "ENTREPRENEURIAL")]
    Entrepreneurial,
}

impl ToString for FactionTraitSymbol {
    fn to_string(&self) -> String {
        match self {
            Self::Bureaucratic => String::from("BUREAUCRATIC"),
            Self::Secretive => String::from("SECRETIVE"),
            Self::Capitalistic => String::from("CAPITALISTIC"),
            Self::Industrious => String::from("INDUSTRIOUS"),
            Self::Peaceful => String::from("PEACEFUL"),
            Self::Distrustful => String::from("DISTRUSTFUL"),
            Self::Welcoming => String::from("WELCOMING"),
            Self::Smugglers => String::from("SMUGGLERS"),
            Self::Scavengers => String::from("SCAVENGERS"),
            Self::Rebellious => String::from("REBELLIOUS"),
            Self::Exiles => String::from("EXILES"),
            Self::Pirates => String::from("PIRATES"),
            Self::Raiders => String::from("RAIDERS"),
            Self::Clan => String::from("CLAN"),
            Self::Guild => String::from("GUILD"),
            Self::Dominion => String::from("DOMINION"),
            Self::Fringe => String::from("FRINGE"),
            Self::Forsaken => String::from("FORSAKEN"),
            Self::Isolated => String::from("ISOLATED"),
            Self::Localized => String::from("LOCALIZED"),
            Self::Established => String::from("ESTABLISHED"),
            Self::Notable => String::from("NOTABLE"),
            Self::Dominant => String::from("DOMINANT"),
            Self::Inescapable => String::from("INESCAPABLE"),
            Self::Innovative => String::from("INNOVATIVE"),
            Self::Bold => String::from("BOLD"),
            Self::Visionary => String::from("VISIONARY"),
            Self::Curious => String::from("CURIOUS"),
            Self::Daring => String::from("DARING"),
            Self::Exploratory => String::from("EXPLORATORY"),
            Self::Resourceful => String::from("RESOURCEFUL"),
            Self::Flexible => String::from("FLEXIBLE"),
            Self::Cooperative => String::from("COOPERATIVE"),
            Self::United => String::from("UNITED"),
            Self::Strategic => String::from("STRATEGIC"),
            Self::Intelligent => String::from("INTELLIGENT"),
            Self::ResearchFocused => String::from("RESEARCH_FOCUSED"),
            Self::Collaborative => String::from("COLLABORATIVE"),
            Self::Progressive => String::from("PROGRESSIVE"),
            Self::Militaristic => String::from("MILITARISTIC"),
            Self::TechnologicallyAdvanced => String::from("TECHNOLOGICALLY_ADVANCED"),
            Self::Aggressive => String::from("AGGRESSIVE"),
            Self::Imperialistic => String::from("IMPERIALISTIC"),
            Self::TreasureHunters => String::from("TREASURE_HUNTERS"),
            Self::Dexterous => String::from("DEXTEROUS"),
            Self::Unpredictable => String::from("UNPREDICTABLE"),
            Self::Brutal => String::from("BRUTAL"),
            Self::Fleeting => String::from("FLEETING"),
            Self::Adaptable => String::from("ADAPTABLE"),
            Self::SelfSufficient => String::from("SELF_SUFFICIENT"),
            Self::Defensive => String::from("DEFENSIVE"),
            Self::Proud => String::from("PROUD"),
            Self::Diverse => String::from("DIVERSE"),
            Self::Independent => String::from("INDEPENDENT"),
            Self::SelfInterested => String::from("SELF_INTERESTED"),
            Self::Fragmented => String::from("FRAGMENTED"),
            Self::Commercial => String::from("COMMERCIAL"),
            Self::FreeMarkets => String::from("FREE_MARKETS"),
            Self::Entrepreneurial => String::from("ENTREPRENEURIAL"),
        }
    }
}

impl Default for FactionTraitSymbol {
    fn default() -> FactionTraitSymbol {
        Self::Bureaucratic
    }
}
